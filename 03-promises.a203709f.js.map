{"mappings":"AAAwBA,SAASC,cAAc,eAGvBC,KAAKC,UAQ1BC,MAAK,EAACC,SAAEA,EAAQC,MAAEA,MACjBC,QAAQC,IAAI,uBAAqBH,QAAiBC,MAAU,IAE7DG,OAAM,EAACJ,SAAEA,EAAQC,MAAEA,MAClBC,QAAQC,IAAI,sBAAoBH,QAAiBC,MAAU","sources":["src/js/03-promises.js"],"sourcesContent":["const ref = { promForm: document.querySelector('.form') };\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\n/* import { Notify } from 'notiflix';\n\nconst promisesForm = document.querySelector('.form');\npromisesForm.addEventListener('submit', onPromisesFormSubmit);\n\nfunction onPromisesFormSubmit(e) {\n  e.preventDefault();\n  const { amount, delay, step } = e.target.elements;\n  const submitButton = e.target.lastElementChild;\n  let delayTime = Number(delay.value);\n  \n  submitButton.disabled = true;\n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, delayTime)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delayTime += Number(step.value);\n  }\n\n  setTimeout(() => {\n    submitButton.disabled = false;\n  }, delayTime);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n */\n\n/* \nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(5);\n  }, 2000);\n});\n\npromise\n  .then(value => {\n    console.log(value); // 5\n    return value * 2;\n  })\n  .then(value => {\n    console.log(value); // 10\n    return value * 3;\n  })\n  .then(value => {\n    console.log(value); // 30\n  })\n  .catch(error => {\n    console.log(error);\n  })\n  .finally(() => {\n    console.log(\"Final task\");\n  });\n\n\n\nПромісифікація функцій\n\n​\n\nУявімо, що у нас є асинхронна функція, яка виконує якусь асинхронну операцію, наприклад, запит на сервер. Для того щоб обробити результат, її доведеться спроектувати таким чином, що вона буде очікувати на два колбеки - для успішного запиту і для помилки.\n\n\n\nconst fetchUserFromServer = (username, onSuccess, onError) => {\n  console.log(`Fetching data for ${username}`);\n\n  setTimeout(() => {\n    // Change value of isSuccess variable to simulate request status\n    const isSuccess = true;\n\n    if (isSuccess) {\n      onSuccess(\"success value\");\n    } else {\n      onError(\"error\");\n    }\n  }, 2000);\n};\n\nconst onFetchSuccess = user => {\n  console.log(user);\n};\n\nconst onFetchError = error => {\n  console.error(error);\n};\n\nfetchUserFromServer(\"Mango\", onFetchSuccess, onFetchError); */\n"],"names":["document","querySelector","Math","random","then","position","delay","console","log","catch"],"version":3,"file":"03-promises.a203709f.js.map"}